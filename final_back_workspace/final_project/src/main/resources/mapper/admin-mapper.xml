<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.or.iei.admin.model.dao.AdminDao">

	<!-- 대출을 위해 책 제목, 저작자, ISBN으로 검색하기 -->
	<select id="selectBookList" 
	parameterType="BookSelectDto"
	resultType="BookList">
		select call_no as bookNo,
			   author_info as author,
			   title_info as title,
			   pub_info as pub,
			   pub_year_info as pubYear,
			   reg_date as regDate,
			   isbn as isbn,
			   place_info as place,
			   image_url as imageUrl,
			   can_lend as canLent,
			   remark as remark
		 from tbl_book
		where 1=1 
		<if test= 'title != "" '>
		and title_info like '%' || #{title} || '%'
		</if>
		<if test = 'author != "" '>
		and author_info like '%' || #{author} || '%'
		</if>
		<if test = 'isbn != null and isbn != ""'>
		and isbn = #{isbn}
		</if>
		
	</select>
	
	<!-- 대출을 위해 유저의 번호 받아서 검색하기.  -->
	<select id="selectOneUser"
	parameterType="UserOne"
	resultType="UserOne">
	select member_no as memberNo,
		   member_Name as memberName,
		   can_borrow as memberBorrow
		 from tbl_member
		where member_no = #{memberNo}
	</select>
	
	<!-- 대출할 유저 번호로 유저이름 가져오기 -->
	<select id="selectMemberName" parameterType="String" resultType="String">
	select member_name from tbl_member where member_no = #{memberNo}
	</select>
	
	<!-- 대출할 책 번호로 책이름 가져오기 -->
	<select id="selectBookTitle" parameterType="String" resultType="String">
	select title_info from tbl_book where call_no = #{bookNo}
	</select>
	
	<!-- 대출된 도서 테이블에 도서 등록 -->
	<insert id="insertLentBook" parameterType="BookLenterDto">
	insert into tbl_lent_book values(seq_lentbook.nextval, sysdate+14, default, #{memberNo}, #{bookNo}, default, null, sysdate, #{bookName}, #{memberName})
	</insert>
	
	<!-- 대출등록 후 책 대출 가능 상태 변경 -->
	<update id="updateBookStatus" parameterType="String">
	update tbl_book set can_lend = 'L' where call_no = #{bookNo}
	</update>
	
	<!-- 현재 대출중인 책 +1 -->
	<update id="updateMemberBorrowCount" parameterType="String">
	update tbl_member set borrowed_book_count = borrowed_book_count +1 where member_no = #{memberNo}
	</update>
	
	<!-- 최대 대출상태인지 확인해서 최대와 같거나 높다면 대출 가능상태 'f'로 변경 -->
	<update id="updateMemberCanBorrow" parameterType="String">
	update tbl_member set can_borrow = 'F' where member_no = #{memberNo} and borrowed_book_count >= max_borrow_count
	</update>
	
	<!-- 예약된 같은 청구기호의 책 삭제 -->
	<delete id="deletereBook" parameterType="BookLenterDto">
	 delete from tbl_reservation where RESERVATION_CALL_NO = #{bookNo}
	</delete>
	
	<!-- 책번호 기준으로 대출 내역 검색 -->
	<select id="selectLentBook" parameterType="LentBookDto" resultType="LentBookList">
	select
    	lb.lent_book_no AS lentbookNo,
    	lb.return_date AS returnDate,
    	lb.reservation AS reservation,
    	lb.lent_member_no AS memberNo,
    	lb.lent_call_no AS callNo,
   		lb.can_renew AS canRenew,
   		lb.actual_return_date AS actualRetrun,
    	lb.lent_date AS lentDate,
    	b.title_info AS title,
    	m.member_name AS memberName
	from tbl_lent_book lb
	join tbl_book b ON lb.lent_call_no = b.call_no
	join tbl_member m ON lb.lent_member_no = m.member_no
	where lb.lent_call_no = #{callNo} AND actual_return_date is null
	</select>
	
	
	
	<!--반납시 오늘 날짜 등록 -->
	<update id="updateactual" parameterType="String">
	update tbl_lent_book set actual_return_date = sysdate where lent_book_no = #{lentbookNo}
	</update>
	
	<!-- 책의 대출 가능 여부 변경 -->
	<update id="updatecanLend" parameterType="String">
	update tbl_book set can_lend = 'T' where call_no = #{callNo}
	</update>
	
	<!-- 현재 대출도서 권수 -1 -->
	<update  id="updateborrowedcount" parameterType="String">
	update tbl_member set borrowed_book_count = borrowed_book_count -1 where member_no = #{memberNo}
	</update>
	
	<!-- 반납연체 계산 후, 연체라면 그만큼 누적 연체에 추가. 
		actual_return_date : DATE
		return_date        : VARCHAR2 
	-->
	<update id="updateOverdueDayCount" parameterType="map">
    UPDATE tbl_member
    SET overdue_day_count = overdue_day_count +
        (SELECT 
            CASE 
                WHEN TO_DATE(lb.actual_return_date) > TO_DATE(lb.return_date, 'YY/MM/DD')
                THEN TRUNC(TO_DATE(lb.actual_return_date) - TO_DATE(lb.return_date, 'YY/MM/DD'))
                ELSE 0
            END
         FROM tbl_lent_book lb
         WHERE lb.lent_book_no = #{lentbookNo}
         )
    WHERE member_no = #{memberNo}
	</update>
	
	<!-- 유저의 대출가능상태 변경 -->
	<update id="updateborrowed" parameterType="String">
	update tbl_member set can_borrow = 'T' where member_no = #{memberNo}
	</update>
	
	
	<update id="updateReservationActualReturnDate" parameterType="String">
	update tbl_reservation 
	   set actual_return_date = sysdate
	 where reservation_call_no = #{_parameter}  
	</update>
	
	<!-- 전체 책 수 조회 -->
	<select id="selectAllBookCount" resultType="_int">
	select count(*)
	  from tbl_book
	</select>
	
	<!-- 전체 책 조회 + 검색 -->
	<select id="selectAllBookList"  resultType="BookList">
	select call_no as bookNo,
			   author_info as author,
			   title_info as title,
			   pub_info as pub,
			   pub_year_info as pubYear,
			   reg_date as regDate,
			   isbn as isbn,
			   place_info as place,
			   image_url as imageUrl,
			   can_lend as canLent,
			   remark as remark
	  from (
	  		select rownum rnum, a.*
	  		  from (
	  		  		  select call_no,
                           author_info,
                           title_info,
                           pub_info,
                           pub_year_info,
                           reg_date,
                           isbn,
                           place_info,
                           image_url,
                           can_lend,
                           remark
                      from tbl_book
                  <where>
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'title'">
               			 AND title_info LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'author'">
                		AND author_info LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'publisher'">
               			AND pub_info LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
				   </where>
                     order by call_no desc
	  		  	   ) a
	  	   ) a
	 where rnum between #{pageInfo.start} and #{pageInfo.end}
	</select>
	
	<!-- 현재 대출중인 책 갯수 -->
	<select id="selectAllLendBookCount" resultType="_int">
	select count(*)
	  from tbl_lent_book
	  where actual_return_date is null
	  </select>
	  
	  <!-- 현재 대출중인 책 리스트  +  검색 -->
	 <select id="selectAllLendBookList" resultType="LentBookList">
	   SELECT lent_book_no as lentbookNo,
           return_date as returnDate,
           reservation,
           lent_member_no as memberNo,
           lent_call_no as callNo,
           can_renew as canRenew,
           actual_return_date as actualRetrun,
           lent_date as lentDate,
           title_info as title,
           member_name as memberName
    FROM (
        SELECT ROWNUM rnum, A.*
        FROM (
            SELECT
                lent_book_no,
                return_date,
                reservation,
                lent_member_no,
                lent_call_no,
                can_renew,
                actual_return_date,
                lent_date,
                title_info,
                member_name
            FROM tbl_lent_book
            <where>
             actual_return_date IS NULL
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'title'">
               			 AND title_info LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'memberName'">
                		AND member_name LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'publisher'">
               			AND pub_info LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
				   </where>
            ORDER BY lent_date DESC
        ) A
    )
    WHERE rnum BETWEEN #{pageInfo.start} AND #{pageInfo.end}
	  </select>
  	
  	<!-- 책 한권에 대하여 수정 -->
  	<update id="fixBook" parameterType="Book">
  		update tbl_book set author_info = #{authorInfo},
  							title_info = #{titleInfo},
  							pub_info = #{pubInfo},
  							pub_year_info = #{pubYear},
  							isbn = #{ISBN},
  							place_info = #{placeInfo},
  							can_lend = #{canLend},
  							remark = #{remark}
  					where call_no = #{callNo}
  	</update>
  	
  	<!-- 책 한권에 대하여 삭제 -->
  	<delete id="deleteBook" parameterType="Book">
  	  delete from tbl_book where call_no = #{callNo}
  	</delete>
  	
  	<!-- 책 한권에 대하여 등록 -->
  	<insert id="insertBook" parameterType="Book">
  	 insert into tbl_book (
        call_no,
        author_info,
        title_info,
        pub_info,
        pub_year_info,
        reg_date,
        isbn,
        place_info,
        image_url,
        can_lend,
        remark
    ) values (
    	#{callNo},
    	#{authorInfo},
        #{titleInfo},
        #{pubInfo},
        #{pubYear},
        sysdate,
        #{ISBN},
        #{placeInfo},
        #{imageUrl},
        #{canLend},
        #{remark}
    )
  	</insert>
  	
  	<!-- 전체 유저수  조회 -->
	<select id="selectAllmemberCount" resultType="_int">
	select count(*)
	  from tbl_member
	  <where>
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'name'">
               			 AND member_name LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'id'">
                		AND member_id LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'email'">
               			AND member_email LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'phone'">
               			AND member_phone LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
	 </where>
	</select>
	
	<!-- 유저 검색 -->
	<select id="selectAllmemberList" resultType="MemberDto">
		select member_no as memberNo,
			   member_id as memberId,
			   member_pw as memberPw,
			   member_name as memberName,
			   member_email as memberEmail,
			   member_phone as memberPhone,
			   is_admin as isAdmin,
			   enroll_date as enrollDate,
			   overdue_day_count as overudeCount,
			   borrowed_book_count as borrowedCount,
			   max_borrow_count as maxBorrowedCount,
			   can_borrow as canBorrow,
			   cant_borrow_day as cantBorrowDay,
			   no_lent_count as noLentCount,
			   can_request as canRequest,
			   member_addr as memberAddr
	  from (
	  		select rownum rnum, a.*
	  		  from (
	  		  		  select member_no,
                           member_id,
                           member_pw,
                           member_name,
                           member_email,
                           member_phone,
                           is_admin,
                           enroll_date,
                           overdue_day_count,
                           borrowed_book_count,
                           max_borrow_count,
                           can_borrow,
                           cant_borrow_day,
                           no_lent_count,
                           can_request,
                           member_addr
                      from tbl_member
                  <where>
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'name'">
               			 AND member_name LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'id'">
                		AND member_id LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'email'">
               			AND member_email LIKE '%' || #{keyword} || '%'
            		</when>
            		<when test="type == 'phone'">
               			AND member_phone LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
	 				</where>
                     order by member_no desc
	  		  	   ) a
	  	   ) a
	 where rnum between #{pageInfo.start} and #{pageInfo.end}
	</select>
	
	<!-- 연체된 책 갯수 가져오기 -->
	<select id="selectIOverMemberCount" resultType="_int">
	select count(*)
	  from tbl_lent_book
	  <where>
	  (TRUNC(sysdate) - TO_DATE(return_date, 'YY/MM/DD')) > 0
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'memberName'">
               			 AND member_name LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'bookName'">
                		AND title_info LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
	 </where>
	</select>
	
	<!-- 연체된 책 중에서 검색 -->
	<select id="selectOverMemberList" resultType="LentBookList">
		select lent_book_no as lentbookNo,
			   return_date as returnDate,
			   reservation as reservation,
			   lent_member_no as memberNo,
			   lent_call_no as callNo,
			   can_renew as canRenew,
			   actual_return_date as actualRetrun,
			   lent_date as lentDate,
			   title_info as title,
			   member_name as memberName,
			   (TRUNC(sysdate) - TO_DATE(return_date, 'YY/MM/DD')) as overDue
	  from (
	  		select rownum rnum, a.*
	  		  from (
	  		  		  select lent_book_no,
                           return_date,
                           reservation,
                           lent_member_no,
                           lent_call_no,
                           can_renew,
                           actual_return_date,
                           lent_date,
                           title_info,
                           member_name
                      from tbl_lent_book
                 <where>
	  				(TRUNC(sysdate) - TO_DATE(return_date, 'YY/MM/DD')) > 0
    				<if test="keyword != null and keyword != ''">
        			<choose>
            		<when test="type == 'memberName'">
               			 AND member_name LIKE '%' || #{keyword} || '%'
            		</when>
           			<when test="type == 'bookName'">
                		AND title_info LIKE '%' || #{keyword} || '%'
            		</when>
        			</choose>
    				</if>
	 			 </where>
                     order by lent_book_no desc
	  		  	   ) a
	  	   ) a
	 where rnum between #{pageInfo.start} and #{pageInfo.end}
	</select>
	
	<!-- 유저 한명의 정보 검색 -->
	<select id="getOneMember" parameterType="String" resultType="MemberDto">
	    select member_no as memberNo,
			   member_id as memberId,
			   member_pw as memberPw,
			   member_name as memberName,
			   member_email as memberEmail,
			   member_phone as memberPhone,
			   is_admin as isAdmin,
			   enroll_date as enrollDate,
			   overdue_day_count as overudeCount,
			   borrowed_book_count as borrowedCount,
			   max_borrow_count as maxBorrowedCount,
			   can_comment as canComment,
			   can_borrow as canBorrow,
			   cant_borrow_day as cantBorrowDay,
			   no_lent_count as noLentCount,
			   can_request as canRequest,
			   member_addr as memberAddr
		from tbl_member where member_no = #{memberNo}
	</select>
	
	<!-- 책 한권의 정보 검색 -->
	<select id="getOneBook" parameterType="String" resultType="BookList">
	select call_no as bookNo,
			   author_info as author,
			   title_info as title,
			   pub_info as pub,
			   pub_year_info as pubYear,
			   reg_date as regDate,
			   isbn as isbn,
			   place_info as place,
			   image_url as imageUrl,
			   can_lend as canLent,
			   remark as remark
		from tbl_book where call_no = #{bookNo}
	</select>
	
	<update id="fixMember" parameterType="MemberDto">
	update tbl_member set can_borrow = #{canBorrow},
						  can_comment = #{canComment},
						  max_borrow_count = #{maxBorrowedCount}
				where member_no = #{memberNo}
	</update>
	
	<!-- 희망도서 목록 수 검색 -->
	<select id="selectRequestCount" resultType="_int">
	select count(*) from tbl_book_request where request_status = 0
	</select>
	
	<!-- 희망도서 정보 리스트 검색 -->
	<select id="selectRequestList" resultType="RequestBook">
		select member_no as memberNo,
			   requested_reason as requestReason,
			   requested_book_name as requestBookName,
			   requested_book_author as requestBookAuthor,
			   requested_book_pub as requestBookPub,
			   request_status as status,
			   requested_date as requestDate
	  from (
	  		select rownum rnum, a.*
	  		  from (
	  		  		  select member_no,
                           requested_reason,
                           requested_book_name,
                           requested_book_author,
                           requested_book_pub,
                           request_status,
                           requested_date
                      from tbl_book_request
    					where request_status = 0
                     order by requested_date desc
	  		  	   ) a
	  	   ) a
	 where rnum between #{start} and #{end}
	</select>
	
	<!-- 희망도서 상태 변경'승인' -->
	<update id="requestUpdateYes" parameterType="String">
	update tbl_book_request set request_status = 2 where member_no = #{target}
	</update>
	
	<!-- 희망도서 상태 변경'반려' -->
	<update id="requestUpdateNo" parameterType="String">
	update tbl_book_request set request_status = 1 where member_no = #{target}
	</update>
	
	<!-- 건의사항 목록 수 검색 -->
	<select id="selectSuggesCount" resultType="_int">
	select count(*) from tbl_suggestion
	</select>
	
	<!-- 건의사항 리스트 검색 -->
	<select id="selectSuggesList" resultType="AdSuggestion">
	 SELECT suggestion_no  		 AS suggesNo,
            suggestion_content   AS suggesContent,
            suggestion_title  	 AS suggesTitle,
            suggestion_date 	 AS suggesDate,
     	    member_no			 AS memberNo,
            member_name 		 AS memberName
    FROM (
        SELECT rownum rnum, a.*
        FROM (
            SELECT s.suggestion_no,
                   s.suggestion_content,
                   s.suggestion_title,
                   s.suggestion_date,
                   s.member_no,
                   m.member_name
            FROM tbl_suggestion s
            JOIN tbl_member m ON s.member_no = m.member_no
            ORDER BY s.suggestion_date DESC
        ) a
    ) a
    WHERE rnum BETWEEN #{start} AND #{end}
	</select>
	
	<!--회원 번호를 기준으로 건의사항 하나 삭제-->
	<delete id="suggesDelete" parameterType="String">
	delete tbl_suggestion where member_no = #{target}
	</delete>
	
	<!-- 신고 리스트 수 가져오기 -->
	<select id="selectReportCount" resultType="_int">
	select count(*) from tbl_report
	</select>
	
	<!-- 신고 리스트 가져오기 -->
	<select id="selectReportList" resultType="AdRepartDto">
	SELECT 	comment_report_no  		 AS repartNo,
            report_reason   		 AS repartReson,
            reported_comment_no  	 		 AS commentNo,
            reported_comment_call_no AS commentCallNo,
            reported_member_id 		 AS repoterId
    FROM (
        SELECT rownum rnum, a.*
        FROM (
            SELECT comment_report_no,
                   report_reason,
                   reported_comment_no,
                   reported_comment_call_no,
                   reported_member_id
            FROM tbl_report 
            ORDER BY comment_report_no DESC
        ) a
    ) a
    WHERE rnum BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 신고 리스트에서 삭제. -->
	<delete id="repartDelete" parameterType="String">
	delete tbl_report where comment_report_no = #{target}
	</delete>
	
	<!-- 건의사항 등록 -->
	<insert id="insertSuggestion">
	insert into tbl_suggestion values (#{memberNo}, seq_suggestion.nextval, #{suggestion.suggesContent}, #{suggestion.suggesTitle}, sysdate)
	</insert>
	
</mapper>
